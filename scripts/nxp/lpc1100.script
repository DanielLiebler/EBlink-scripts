/////////////////////////////////////////////////////
//
//                   LPC1100
//
// Adapted from stmicro scripts by J.DuBois
// at Thermalogic Corporation (jer@thlogic.com)

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x1FFF0000\" length=\"0x1FFF\"/>
 <memory type=\"ram\" start=\"0x10000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x00000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x80000\"/>
 <memory type=\"ram\" start=\"0x50000000\" length=\"0x200000\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x100000\"/>
</memory-map>"

ram_size <- 0
flash_size <- 0
page_size <- 0

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function lpc_device()
{
    local deviceStr

    switch(deviceId) {

		case 0x0A40902B :
		case 0x1A40902B :
		case 0x4440502B :
		case 0x2540902B :
			deviceStr = "1114"
			flash_size = 0x8000
			page_size = 0x1000
			ram_size = 0x1000
			break;

		case 0x0444102B :
		case 0x2540102B :
		case 0x00040040 :
		case 0x00040042 :
		case 0x00040060 :
		case 0x00040070 :
			deviceStr = "1114/3xx"
			flash_size = 0x8000
			page_size = 0x1000
			ram_size = 0x2000
			break;

		case 0x00050080 :
			deviceStr = "1115"
			flash_size = 0x10000
			page_size = 0x1000
			ram_size = 0x2000
			break

        default:
            throw ERROR_NOT_FOUND
    }


    // Inform user of the device found
    printf("NXP LPC family : LPC%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0) {
      flash_size = (FLASH_SIZE & 0xffff) * 1024
      printf("CLI set  FLASH : 0x%X\n", flash_size)
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0) {
      ram_size = (RAM_SIZE & 0xffff) * 1024
      printf("CLI set    RAM : 0x%X\n", ram_size)
    }

	_n_throw(intrfApi.writeMem32(0x40048000, 0x02))

    DeviceAPI().memmap( format( mem_template,  ram_size,flash_size,page_size))

    // Flash loader script
    require("nxp/flash/lpc1100.script")
}

/////////////////////////////////////////////////////////////////////////////////
//
// We overrule the default reset_post function
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post_hook(resetType)
{
	local tmp

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //

    if( resetType != USER_RESET )
    {
        try {
			// Unmap the boot loader from the first 512 bytes of memory
			_n_throw(intrfApi.writeMem32(0x40048000,0x02))

			// Set the Stack pointer according the Vector table entry
			intrfApi.readMem32(0x00000000)
			targetApi.writeReg("SP", intrfApi.value32)

			// Set the Program pointer according the Vector table entry
			intrfApi.readMem32(0x00000004)
			targetApi.writeReg("PC", intrfApi.value32)
        }

        // Catch the errors
        catch(e){
            if(e < ERROR_NOTIFIED)
                errorf("\nError: Resetting! %d\n", e )
            return ERROR_NOTIFIED
        }

		printf("Reset done\n")

    }

    return ERROR_OK
}
