/////////////////////////////////////////////////////
//
//                   STM32U5x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces.
//

//*************************************************************
//*****             Memory map of the U5                   ****
//*************************************************************
const mem_template_U5 = @@"
<?xml version=\"1.0\"?>
<memory-map>
  <memory type=\"rom\" start=\"0x00000000\" length=\"0x100000\"/>
  <memory type=\"ram\" start=\"0x10000000\" length=\"0x4000\"/>
  <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>

  <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
   <property name=\"blocksize\">0x%x</property>
   <property name=\"secstart\">0</property>
  </memory>

  <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
  <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
  <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
  <memory type=\"rom\" start=\"0x0bf90000\" length=\"0x8000\"/>
 </memory-map>"

// Used for restoreDualBankMode function
default_optr_value  <- 0x1FEFF8AA

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device()
{
    local flash_size
    local page_size
    local ram_size
    
    // Get the flash size in KB
    _n_throw(intrfApi.readMem32(0x0bfa07a0))
    flash_size = (intrfApi.value32 &0xFFFF)*1024
        
    // Set the memory map according the device ID
      local deviceStr
      switch(deviceId) {
      
        case 0x455 : // CHIPID_STM32U535/545
            deviceStr = "U535/545"
            ram_size = 0x44800 // 274KB
            page_size = 0x2000
            break
            
        case 0x476 : // CHIPID_STM32U5F/Gx5
            deviceStr = "U5F/Gx5"
            ram_size = 0x2F4800 // 3026B
            page_size = 0x2000
            break
            
        case 0x481 : // CHIPID_STM32U59x/5Ax    
            deviceStr = "U59x/5Ax"
            ram_size = 0x274800 // 2514KB
            page_size = 0x2000
            break
            
        case 0x482 : // CHIPID_STM32U575/585      
            deviceStr = "U575/585"
            ram_size = 0xC4800 // 786KB
            page_size = 0x2000
            break

        default:
            throw ERROR_NOT_FOUND
    }

    // Inform user of the device found
    printf("STmicro family : STM32%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : %dKB\nConfigured RAM : %dKB\n", flash_size/1024, ram_size/1024)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      printf("CLI set  FLASH : %dKB\n", flash_size)
      flash_size = (FLASH_SIZE & 0xffff) * 1024
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      printf("CLI set    RAM : %dKB\n", ram_size)
      ram_size = (RAM_SIZE & 0xffff) * 1024
    }

    DeviceAPI().memmap(format( mem_template_U5, ram_size, flash_size, page_size))

    // Include flash loader script
    require("stmicro/flash/l5_u5.script")
}

